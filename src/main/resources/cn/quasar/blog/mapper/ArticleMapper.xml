<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.quasar.blog.mapper.ArticleMapper">
    <select id="queryArticles" resultType="cn.quasar.blog.domain.Article">
        select
            p.id as id,
            p.name as article_name,
            p.author_id as author_id,
            p.content as content,
            p.description as description,
            p.create_time as create_time,
            p.last_time as last_time,
            p.status as article_status,
            group_concat(b.name) as category,
            p.author_name as author_name,
            p.avatar as avatar
        from post_article as p, categories as c, category as b where p.id = c.article_id and b.id = c.category_id group by p.name order by p.id;
    </select>

    <select id="selectArticleById" parameterType="int" resultType="cn.quasar.blog.domain.Article">
        select
            p.id as id,
            p.name as article_name,
            p.author_id as author_id,
            p.content as content,
            p.description as description,
            p.create_time as create_time,
            p.last_time as last_time,
            p.status as article_status,
            group_concat(b.name) as category,
            p.author_name as author_name,
            p.avatar as avatar
        from post_article as p, categories as c, category as b where p.id = c.article_id and b.id = c.category_id and p.id = #{id} group by p.name order by p.id;
    </select>

    <select id="selectArticleByName" parameterType="string" resultType="cn.quasar.blog.domain.Article">
        select
            p.id as id,
            p.name as article_name,
            p.author_id as author_id,
            p.content as content,
            p.description as description,
            p.create_time as create_time,
            p.last_time as last_time,
            p.status as article_status,
            group_concat(b.name) as category,
            p.author_name as author_name,
            p.avatar as avatar
        from post_article as p, categories as c, category as b where p.id = c.article_id and b.id = c.category_id and p.name = #{articleName} group by p.name order by p.id;
    </select>

    <select id="selectArticlesByAuthor" parameterType="int" resultType="cn.quasar.blog.domain.Article">
        select
            p.id as id,
            p.name as article_name,
            p.author_id as author_id,
            p.content as content,
            p.description as description,
            p.create_time as create_time,
            p.last_time as last_time,
            p.status as article_status,
            group_concat(b.name) as category,
            p.author_name as author_name,
            p.avatar as avatar
        from post_article as p, categories as c, category as b where p.id = c.article_id and b.id = c.category_id and p.author_id = #{authorId} group by p.name order by p.id;
    </select>

    <select id="selectArticlesByCategory" parameterType="string" resultType="cn.quasar.blog.domain.Article">
        select
            p.id as id,
            p.name as article_name,
            p.author_id as author_id,
            p.content as content,
            p.description as description,
            p.create_time as create_time,
            p.last_time as last_time,
            p.status as article_status,
            group_concat(b.name) as category,
            p.author_name as author_name,
            p.avatar as avatar
        from post_article as p, categories as c, category as b where p.id = c.article_id and b.id = c.category_id and b.name = #{categoryName} group by p.name order by p.id;
    </select>

    <insert id="addArticle" parameterType="cn.quasar.blog.domain.Article">
        insert into post_article (
            name,
            description,
            content,
            author_id,
            create_time,
            last_time,
            status,
            author_name
        ) select
                     #{articleName},
                     #{description},
                     #{content},
                     #{authorId},
                     now(),
                     now(),
                     #{articleStatus},
                     #{authorName}
          where not exists(select 1 from post_article where name = #{articleName}) ;
    </insert>

    <select id="queryArticleByCondition" parameterType="cn.quasar.blog.domain.Article" resultType="cn.quasar.blog.domain.Article">
        select
        id,
        name as article_name,
        description,
        content,
        author_id,
        create_time,
        last_time,
        status as article_status,
        p.author_name as author_name
        from post_article
        where
        id = #{id}
        <if test="articleName != ''">
            and name = #{articleName}
        </if>
        <if test="authorId != 0">
            and author_id = #{authorId}
        </if>
        <if test="createTime != null">
            and create_time = #{createTime}
        </if>
        <if test="lastTime != null">
            and last_time = #{lastTime}
        </if>
        <if test="articleStatus != null">
            and status = #{articleStatus}
        </if>
        ;
    </select>

    <select id="queryArticleById" resultType="cn.quasar.blog.domain.Article">
        select
            id,
            name as article_name,
            description,
            content,
            author_id,
            create_time,
            last_time,
            status as article_status,
            p.author_name as author_name,
            p.avatar as avatar
        from post_article where id = #{id};
    </select>

    <select id="queryArticleByName" resultType="cn.quasar.blog.domain.Article">
        select
            id,
            name as article_name,
            description,
            content,
            author_id,
            create_time,
            last_time,
            author_name,
            avatar
        from post_article where name = #{articleName} limit 1;
    </select>

    <update id="updateArticleById">
        update post_article set
        <if test="article.articleName != null and article.articleName != ''">
            name = #{article.articleName},
        </if>
        <if test="article.description != null and article.description != ''">
            description = #{article.description},
        </if>
        <if test="article.content != null" >
            content = #{article.content},
        </if>
        <if test="article.authorId != 0">
            author_id = #{article.authorId},
        </if>
        <if test="article.id != 0">
            id = #{article.id},
        </if>
        <if test="article.articleStatus != null">
            status = #{article.articleStatus},
        </if>
        last_time = now()
        where id = #{id};
    </update>

    <update id="updateArticleByArticleName">
        update post_article set
        <if test="article.id != 0">
            id = #{article.id},
        </if>
        <if test="article.description !=null and article.description != ''">
            description = #{article.description},
        </if>
        <if test="article.content != null and article.content != ''" >
            content = #{article.content},
        </if>
        <if test="article.authorId != 0">
            author_id = #{article.authorId},
        </if>
        <if test="article.articleName != null and article.articleName != ''">
            name = #{article.articleName},
        </if>
        <if test="article.articleStatus != null">
            status = #{article.articleStatus},
        </if>
        last_time = now()
        where
        <if test="name != null and name != ''">
            name = #{name};
        </if>
        <if test="name == null and name == ''">
            name = 'unknow';
        </if>
    </update>

    <delete id="deleteArticleById">
        delete from post_article where id = #{id};
    </delete>

    <delete id="deleteArticleByArticleName">
        delete from post_article where name = #{articleName};
    </delete>

    <delete id="deleteAllArticle">
        delete from post_article;
    </delete>

    <select id="demo" resultType="cn.quasar.blog.domain.Article">
        select
           a.id as 'id',
           a.name 'article_name',
           a.description 'description',
           a.content 'content',
           a.author_id 'author_id',
           a.create_time 'create_time',
           a.last_time 'last_time',
           a.status 'article_status',
           a.author_name 'author_name',
           GROUP_CONCAT(b.name) 'category'
        from
            post_article a LEFT JOIN (
                select a.article_id, b.`name` from categories a LEFT JOIN category b on b.id = a.category_id
            ) b on a.id = b.article_id where a.id = 34 GROUP BY a.name;
    </select>
</mapper>